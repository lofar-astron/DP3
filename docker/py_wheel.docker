# Copyright (C) 2022 ASTRON (Netherlands Institute for Radio Astronomy)
# SPDX-License-Identifier: GPL-3.0-or-later

# Also put PYMAJOR and PYMINOR above 'FROM', so 'FROM' can use them.
ARG PYMAJOR
ARG PYMINOR

ARG CASACORE_VERSION=3.7.1

FROM quay.io/casacore/casacore:py${PYMAJOR}${PYMINOR}_v${CASACORE_VERSION}

ARG AOFLAGGER_VERSION=3.4.0
ARG EVERYBEAM_VERSION=0.7.4
ARG HDF5_VERSION=1.12.2
ARG FFTW_VERSION=3.3.8
ARG LUA_VERSION=5.3.6
# ARG's must be repeated after each 'FROM'
ARG PYMAJOR
ARG PYMINOR
ARG PYUNICODE

ENV THREADS=4

COPY docker/install_boost.sh /
RUN bash /install_boost.sh

COPY docker/install_fftw.sh /
RUN bash /install_fftw.sh ${FFTW_VERSION}

COPY docker/install_hdf5.sh /
RUN bash /install_hdf5.sh ${HDF5_VERSION}

COPY docker/install_lua.sh /
RUN bash /install_lua.sh ${LUA_VERSION}

# Create fake libpython to stop the linker from complaining. The wheel should find the user's libpython at runtime.
RUN touch /usr/lib64/libpython${PYMAJOR}.${PYMINOR}${PYUNICODE}.so

# EveryBeam uses FFTW, HDF5
COPY docker/install_everybeam.sh /
RUN bash /install_everybeam.sh ${EVERYBEAM_VERSION}

# AOFlagger uses FFTW, HDF5, LUA.
COPY docker/install_aoflagger.sh /
RUN bash /install_aoflagger.sh ${AOFLAGGER_VERSION} ${PYMAJOR}.${PYMINOR}

ADD . /dp3
WORKDIR /dp3

# Ensure DP3 uses the correct Python version.
RUN sed -i -z "s=\(find_package(\n *Python3\)=\1 ${PYMAJOR}.${PYMINOR} EXACT=" CMakeLists.txt
RUN sed -i "s=find_package(PythonInterp 3 REQUIRED)=find_package(PythonInterp ${PYMAJOR}.${PYMINOR} EXACT REQUIRED)=" CMakeLists.txt

# Wheels should not actually link to libpython, since they find the user's python at runtime.
# So prevent DP3 to even find libpython (which is not even included in the anylinux images)
RUN sed -i 's=\(COMPONENTS Interpreter\) Development=\1=' CMakeLists.txt
RUN sed -i '/find_package(PythonLibs 3 REQUIRED)/d' CMakeLists.txt

# Downgrade patchelf due to https://github.com/pypa/manylinux/issues/1421
RUN pipx install --force 'patchelf<0.17'

# Create the wheel and put it to the /output folder
# Can be run manually to create wheels from within an interactive docker
# container. Note to remove the build folder before trying a different setup.py,
# and to remove the previous wheel when changing parameters that causes a new
# wheel filename e.g. changing the version number.
RUN /opt/python/${TARGET}/bin/pip install setuptools
RUN /opt/python/${TARGET}/bin/python ./setup.py build_ext -j${THREADS}
RUN /opt/python/${TARGET}/bin/python ./setup.py bdist_wheel -d .
RUN auditwheel repair --plat manylinux2014_x86_64 -w /output *.whl
