description: >-
  Apply the LOFAR beam model, or the inverse of it.
inputs:
  step_name:
    type: string
    doc: unique name for the step.
    default: applybeam
  type:
    type: string
    doc: Case-insensitive step type; must be 'applybeam'.
    default: applybeam
  direction:
    type: string
    doc: >-
      A RA/Dec value specifying in what direction to correct the beam. See ``phaseshift.phasecenter`` for syntax.
      If empty, the beam is corrected in the direction of the current phase center.
  beamproximitylimit:
    type: float
    default: 60
    doc: >-
      Specified in arcseconds, and if non-zero, sources that are near each other are clustered and the
      beam is only calculated for each cluster. This trades an increase in
      speed for a very low level of loss in accuracy.
      This parameter is ignored in the ApplyBeam step itself, and should
      instead be used as part of predict, ddecal, gaincal,
      h5parmpredict, etc. This parameter has been introduced in Dec 2020.
  onebeamperpatch:
    type: boolean
    default: false
    doc: >-
      Deprecated: use beamproximitylimit instead.
      When ``true``, computes the beam only for the center of each patch
      (saves computation time, but you should set this to ``false`` for large
      patches).
      In the ApplyBeam step, this setting does not make sense
      (but it does if the applybeam is part of predict, ddecal, gaincal,
      h5parmpredict, etc.).
      Generally, ``false`` is the right setting for this option.
      The default has changed to false in Nov 2018.
  usechannelfreq:
    type: boolean?
    default: true
    doc: >-
      Compute the beam for each channel of the measurement set separately.
      This is useful for merged / concatenated measurement sets.
      For raw LOFAR data you should set it to ``false``,
      so that the beam will be formed as in the station hardware.
      Also, setting it to false is faster.
  updateweights:
    type: boolean?
    doc: >-
      Update the weights column, in a way consistent with
      the weights being inverse proportional to the autocorrelations
      (e.g. if 'autoweight' was used before).
  invert:
    type: boolean?
    default: true
    doc: >-
      Invert the corrections, to correct the data. Default is ``true``.
      If you want to corrupt the data, set it to ``false``.
  beammode:
    type: enum
    symbols: array_factor, element, full, default
    default: default
    doc: >-
      Beam mode to apply, can be ``array_factor``, ``element``, ``full``, or
      ``default`` (same as ``full``). The mode ``full`` applies both the element
      beam and the array factor.
  elementmodel:
    default: default
    type: enum
    symbols: hamaker, lobes, oskarsphericalwave, oskardipole (or any other model EveryBeam supports) 
    doc: >-
      Specifies which beam model to use. The default value of "default" means that the model
      is inferred from the MS. For a LOFAR MS the default is hamaker, and for an OSKAR MS the default is oskardipole.
  skipstations:
    type: string[]
    default: []
    doc: >-
      List of stations for which the beam should NOT be applied. This is an advanced option, for uses where the beam has previously been applied for a part of the stations. This setting does not work for dish-based telescopes.
  usemodeldata:
    type: boolean?
    default: false
    doc: >-
      Apply the beam to the model data buffers instead of the main data buffer.
      The direction parameter is ignored. Instead the direction is read from the metadata
      added when the model data was created. For model data generated by
      WGridderPredict for example, the directions originate from the regions
      file supplied to WGridderPredict.
  coefficients_path:
    type: string
    default: "\"\""
    doc: >-
      Specifies the path of coefficients that might be needed to calculate the beam. This field is passed to EveryBeam. Not all telescope beams require coefficient files, and for example for the LOFAR beam model this field can be left empty.
