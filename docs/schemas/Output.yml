description: >-
  Add intermediate output steps
inputs:
  msout/msout&#46;name:
    type: string
    doc: >-
      Name of new output MeasurementSet; if empty, the input MS is updated. The other msout parameters are not applicable (apart from ``countflag``). Normally an update is only done if a step is given that can change the data (e.g. PreFlagger). However, a name '.' or a name equal to the name of the input MS means that the input MS will always be updated, even if no step is given. This is useful if only flagging of NaN-s in the MS needs to be done. Note that when doing averaging, the input MS cannot be updated.
  msout&#46;overwrite:
    default: false
    type: bool
    doc: >-
      When creating a new MS, overwrite if already existing?
  msout&#46;datacolumn:
    default: DATA
    type: string
    doc: >-
      The column in which to write the data. When creating a new MeasurementSet,
      only column DATA can be used. When updating the input MeasurementSet,
      any column can be used. If not existing, it will be created first.
      When this setting is used, the output step always writes the data.
  msout&#46;weightcolumn:
    default: WEIGHT_SPECTRUM
    type: string
    doc: >-
      The column in which to write the weights. When creating a new MeasurementSet,
      only WEIGHT_SPECTRUM can be used. When updating the input Measurementset,
      any column can be used. If not existing, it will be created first.
      When this setting is used, the output step always writes the weights.
  msout&#46;flagcolumn:
    default: FLAG
    type: string
    doc: >-
      The column in which to write the flags. When creating a new MeasurementSet,
      only the name FLAG can be used. When updating the input MeasurementSet,
      any column name can be used. If not existing, it will be created first.
      When this setting is used, the output step always writes the flags.
  msout&#46;chunkduration:
    default: 0.0
    type: double
    doc: >-
      Duration (in seconds) after which to start writing a next measurement set. The new measurement set is named with the number of the chunk (with leading zeros to make it at least contain 3 digits) added in front of the extension, prepended by a dash. For example, if msout is "myobs.ms", the first chunk will be called "myobs-000.ms", the next one "myobs-001.ms", etc. When the values is set to zero (the default), no time chunking is performed..
  msout&#46;tilesize:
    default: 1024
    type: integer
    doc: >-
      For expert user: tile size (in Kbytes) for the data columns in the output MS.
  msout&#46;tilenchan:
    default: 64
    type: integer
    doc: >-
      For expert user: maximum number of channels per tile in output MS.
  msout&#46;clusterdesc:
    default: "\"\""
    type: string
    doc: >-
      If not empty, create the VDS file using this ClusterDesc file.
  msout&#46;vdsdir:
    default: "\"\""
    type: string
    doc: >-
      Directory where to put the VDS file; if empty, the MS directory is used.
  msout&#46;scalarflags:
    default: depends on compile-time option `METADATA_COMPRESSION_DEFAULT`
    type: bool
    doc: >-
      If set to true, only one flag will be stored for four correlations. For LOFAR, all correlations have equal flags, so storing all flags is redunandant. This typically saves a couple of percent storage.
  msout&#46;antennacompression:
    default: depends on compile-time option `METADATA_COMPRESSION_DEFAULT`
    type: bool
    doc: >-
      If set to true, a special AntennaStMan storage manager will be used that (losslessly) compresses the antenna values of the ANTENNA1 and ANTENNA2 columns. Normally, the pair of values from these columns form a repeating pattern; the storage manager just stores the repeating pattern once.
  msout&#46;uvwcompression:
    default: depends on compile-time option `METADATA_COMPRESSION_DEFAULT`
    type: bool
    doc: >-
      If set to true, a special UvwStMan storage manager will be used that (losslessly) compresses UVW values. It does this by taking advantage of the fact that values within of the same correlation matrix can be determined by just storing one uvw-value per antenna. With this compression, UVW values do not need to be recalculated from the antenna positions.
  msout&#46;storagemanager/msout&#46;storagemanager&#46;name:
    default: "\"\""
    type: string
    doc: >-
      What storage manager to use. Options: empty (=default), "stokes_i", "dysco" or "sisco". When empty, the data will be stored uncompressed. "stokes_i" will use the StokesIStMan, which stores only one (Stokes I) value for four correlations. For this case, the 2nd and 3rd correlations (normally the XY and YX values) must be zero. When set to "dysco", the data will be compressed using Dysco. Settings below will set the compression settings; see `the Dysco wiki <https://github.com/aroffringa/dysco/wiki>`__ and `the paper <https://arxiv.org/abs/1609.02019>`__ for more info. The default settings are reasonably conservative and safe.
  msout&#46;storagemanager&#46;databitrate:
    default: 10
    type: integer
    doc: >-
      Number of bits per float used for columns containing visibilities. Can be set to zero to compress weights only.
  msout&#46;storagemanager&#46;weightbitrate:
    default: 12
    type: integer
    doc: >-
      Number of bits per float used for WEIGHT_SPECTRUM column. Can be set to zero to compress data only. Note that compressing weights will set all polarizations to the same weight (determined by the minimum weight over the polarizations).
  msout&#46;storagemanager&#46;distribution:
    default: "TruncatedGaussian"
    type: string
    doc: >-
      Assumed distribution for compression; "Uniform", "TruncatedGaussian", "Gaussian" or "StudentsT".
  msout&#46;storagemanager&#46;disttruncation:
    default: 2.5
    type: double
    doc: >-
      Truncation level for compression with the Truncated Gaussian distribution.
  msout&#46;storagemanager&#46;normalization:
    default: "AF"
    type: string
    doc: >-
      Compression normalization method: AF, RF or Row.
  msout&#46;storagemanager&#46;predict_level:
    default: 2
    type: int
    doc: >-
      Prediction order for Sisco. This sets the preprocessing done on values before they are deflate-compressed. Prediction is done using previous time and frequency values of the same baseline. The predict_level should be between -1 and 2: -1 for no prediction; 0 for compressing the difference; 1 for using linear prediction using two previous values; and 2 for using quadratic prediction using three previous values. Model data is best compressed with level 2, and can reduce the data to ~50-60% of its original size. Noisy (real) data compression is normally best with level -1 or 0, but has normally less effect (10-20%). The exception is when the data contains many unset values (i.e. flagged or zero).
  msout&#46;storagemanager&#46;deflate_level:
    default: 9
    type: int
    doc: >-
      Deflate compression level for Sisco. Number between 1 (fastest but least compressing) and 12 (slowest but strongest compression). See the `https://github.com/ebiggers/libdeflate?tab=readme-ov-file#compression-levels <compression levels section>`_ of the libdeflate manual for more info.
