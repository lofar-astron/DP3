description: >-
  Calibrate gains using StefCal.
inputs:
  type:
    type: string
    doc: >-
      Case-insensitive step type; must be 'gaincal' or 'calibrate' `.`
  caltype:
    type: string
    doc: >-
      The type of calibration that needs to be performed, can be one of 'fulljones', 'diagonal', 'phaseonly', 'scalarphase'. Experimental values are 'amplitude' or 'scalaramplitude', 'tec', 'tecandphase' `.`
  parmdb:
    type: string
    doc: >-
      Path of parmdb in which the computed parameters are to be stored. If the parmdb already exists, it will be overwritten. **Note**: You cannot use this parmdb in an applycal step in the same run of DPPP. To apply the solutions of the gaincal directly, use 'gaincal.applysolution' (see below).  **New in LOFAR 3.1:** if the parmdb name ends in ``.h5`` , an H5Parm will be written `.`
  blrange:
    type: vector
    doc: >-
      Vector of baseline lengths to use for calibration. See :ref:`Description of baseline selection parameters`. New in version 2.20 `.`
  uvlambdamin:
    default: 0
    type: double
    doc: >-
      Ignore baselines / channels with UV < uvlambdamin wavelengths. **Note**: also all other variants of uv flagging described in :ref:`UVWFlagger` (uvmmin, uvmrange, uvlambdarange, etc) are supported (New in 3.1) `.`
  baseline:
    type: string
    doc: >-
      Baseline selection filter for calibration. See :ref:`Description of baseline selection parameters`. New in version 2.20 `.`
  applysolution:
    default: false
    type: bool
    doc: >-
      Apply the calibration solution to the visibilities. Note that you should always also inspect the parmdb afterwards to check that the solutions look reasonable `.`
  solint:
    default: 1
    type: int
    doc: >-
      Number of time slots on which a solution is assumed to be constant (same as CellSize.Time in BBS). 0 means all time slots. Note that for larger settings of solint, and specially for solint = 0, the memory usage of gaincal will be large (all visibilities for a solint should fit in memory) `.`
  nchan:
    default: 0
    type: int
    doc: >-
      Number of channels on which a solution is assumed to be constant (same as CellSize.Freq in BBS). 0 means all channels. When caltype = 'tec' or 'tecandphase', the default is 1, meaning that a TEC will be fitted through a phase for each channel `.`
  usemodelcolumn:
    default: false
    type: bool
    doc: >-
      Use model column. The model column name can be specified with msin.modelcolumn (default MODEL_DATA) `.`
  applybeamtomodelcolumn:
    default: false
    type: bool
    doc: >-
      Apply the beam model (at the phase center) to the visibilities in the model column. If this option is true, all options from :ref:`ApplyBeam` are valid as well (except .invert, since the model data will always be corrupted for the beam) `.`
  propagatesolutions:
    default: true
    type: bool
    doc: >-
      Use solutions of one time interval as a starting value for the next time interval `.`
  maxiter:
    default: 50
    type: int
    doc: >-
      Maximum number of iterations of stefcal `.`
  detectstalling:
    default: true
    type: bool
    doc: >-
      Detect if the iteration does not converge anymore and then stop iterating even if maxiter is not reached `.`
  tolerance:
    default: 1.e-5
    type: float
    doc: >-
      Tolerance to which the model should match the data `.`
  minblperant:
    default: 4
    type: int
    doc: >-
      If an antenna has less than minblperant unflagged data points for a given solution slot, it is not used for calibration `.`
  timeslotsperparmupdate:
    default: 500
    type: int
    doc: >-
      Number of solution intervals after which the parmdb is updated `.`
  debuglevel:
    default: 0
    type: int
    doc: >-
      Debugging. If debuglevel==1, then a file debug.h5 is created containing all iterands. This file will be very large; you can use it to check the convergence speed etc `.`
  sourcedb:
    type: 
    doc: >-
      Same as in :ref:`Predict` step `.`
  sources:
    type: 
    doc: >-
      Same as in :ref:`Predict` step `.`
  usebeammodel:
    type: 
    doc: >-
      Same as in :ref:`Predict` step `.`
  applycal&#46;*:
    type: 
    doc: >-
      ApplyCal sub-step, same as in :ref:`Predict` step `.`
  onebeamperpatch:
    type: 
    doc: >-
      Same as in :ref:`ApplyBeam` step `.`
  usechannelfreq:
    type: 
    doc: >-
      Same as in :ref:`ApplyBeam` step `.`
  beammode:
    type: 
    doc: >-
      Same as in :ref:`ApplyBeam` step `.`
